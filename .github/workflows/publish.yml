name: Publish to Gradle Plugin Portal

on:
  push:
    tags:
      - 'v?[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish (omit leading “v”). Leave empty to pick the latest git tag.'
        required: false
        default: ''

permissions:
  contents: read

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: true

jobs:
  wait-for-ci:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Wait for CI workflow to complete
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.ref }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 15
          running-workflow-name: "Publish to Gradle Plugin Portal"
          verbose: true
          # Don't specify check-name or check-regexp to wait for ALL checks
          # except the current workflow (specified by running-workflow-name)

  publish:
    name: Publish to Gradle Plugin Portal
    runs-on: ubuntu-latest
    needs: wait-for-ci
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-publish-${{ runner.os }}-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-publish-${{ runner.os }}-
            gradle-${{ runner.os }}-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: wrapper

      - name: Extract version from tag or input
        id: get_version
        run: |
          set -e
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ -n "${{ github.event.inputs.tag }}" ]]; then
              v="${{ github.event.inputs.tag }}"
            else
              git fetch --tags
              v="$(git describe --tags --abbrev=0)"
              v="${v#v}"
            fi
          else
            v="${GITHUB_REF#refs/tags/}"
            v="${v#v}"
          fi
          echo "VERSION=$v" >> $GITHUB_OUTPUT
          echo "Extracted version: $v"

      - name: Publish to Plugin Portal
        env:
          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}
        run: |
          echo "Publishing version ${{ steps.get_version.outputs.VERSION }}"
          # Original CircleCI command: final -P "release.version"="${CIRCLE_TAG}" --exclude-task test -P "gradle.publish.key"="${GRADLE_PUBLISH_KEY}" -P "gradle.publish.secret"="${GRADLE_PUBLISH_SECRET}"
          # The -P flags for key/secret might not be strictly needed if your build.gradle(.kts)
          # is set up to read them from environment variables (which ORG_GRADLE_PROJECT_ gradlePublishKey would become).
          # Using -Prelease.version directly is fine.
          ./gradlew publishPlugins \
            -Prelease.version="${{ steps.get_version.outputs.VERSION }}" \
            --no-daemon \
            --exclude-task test

      - name: Publish summary
        if: success()
        run: |
          echo "### ✅ Successfully published version ${{ steps.get_version.outputs.VERSION }} to Gradle Plugin Portal" >> $GITHUB_STEP_SUMMARY
